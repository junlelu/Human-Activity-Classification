train=read.table('Train/X_train.txt', colClasses='numeric')
subj=as.integer(readLines('Train/subject_id_train.txt'))
trainy=as.integer(readLines('Train/y_train.txt'))
test=read.table('Test/X_test.txt', colClasses='numeric')
testy=as.integer(readLines('Test/y_test.txt'))
feature=as.character(unlist(read.table('features.txt')))
train=read.table('./Train/X_train.txt', colClasses='numeric')
getwd()
setwd("/Users/junle/Github/machine_learning/human_activity_classification/HAPT Data Set")
train=read.table('./Train/X_train.txt', colClasses='numeric')
subj=as.integer(readLines('Train/subject_id_train.txt'))
trainy=as.integer(readLines('Train/y_train.txt'))
test=read.table('Test/X_test.txt', colClasses='numeric')
testy=as.integer(readLines('Test/y_test.txt'))
feature=as.character(unlist(read.table('features.txt')))
#select the six activities
train=train[trainy%in%1:6, ]
subj=subj[trainy%in%1:6]
trainy=trainy[trainy%in%1:6]
test=test[testy%in%1:6, ]
testy=testy[testy%in%1:6]
table(trainy) #how many obs for each activity
table(subj, trainy) #how many obs for each subject and each activity
pc1=prcomp(train)
cumvar=cumsum(pc1[[1]]^2)/sum(pc1[[1]]^2) #cumulative variance explained by PCs
plot(cumvar, type='b', cex=0.5) #scree plot
k1=which.min(pc1[[1]]^2>mean(pc1[[1]]^2))-1 #Kaiser's rule
trainpc1=pc[[5]][, 1:k1]
pairs(trainpc1[, 1:3], col=rainbow(6, end=0.8)[trainy], cex=0.7)
k1=which.min(pc1[[1]]^2>mean(pc1[[1]]^2))-1 #Kaiser's rule
trainpc1=pc1[[5]][, 1:k1]
pairs(trainpc1[, 1:3], col=rainbow(6, end=0.8)[trainy], cex=0.7)
pairs(trainpc1[, 1:4], col=rainbow(6, end=0.8)[trainy], cex=0.7)
pc2=prcomp(train, scale=T)
cumvar=cumsum(pc2[[1]]^2)/561
plot(cumvar, type='b', cex=0.5)
k2=which.min(pc2[[1]]^2>1)-1
trainpc2=pc2[[5]][, 1:k2]
pairs(trainpc2[, 1:3], col=rainbow(6, end=0.8)[trainy], cex=0.7)
fload1=pc1[[2]]%*%diag(pc1[[1]])[, 1:k1]
fload2=pc2[[2]]%*%diag(pc2[[1]])[, 1:k2]
pairs(fload1[, 1:4])
pairs(fload2[, 1:4])
#variables weight mostly in each factor
fload1[which.min(fload1)]=-max(fload1)
image(1:5, 1:561, t(fload1[, 1:5]), col=bluered(64))
feature[abs(fload1[, 1])>0.4] #important variables in the first factor
temp=which(act_vs_subj<1 & pact<1e-5)
sum(temp%in%which(pact<1e-300))/length(temp) #"trouble" variables in the first factor
temp=which(abs(fload1[, 1])>0.1)
sum(temp%in%which(pact<1e-300))/length(temp) #significant variables in the first factor
feature[abs(fload1[, 2])>0.15] #important variables in the second factor
temp=which(abs(fload1[, 2])>0.1)
sum(temp%in%which(pact1to3<1e-300))/length(temp) #significant dynamic variables in the second factor
feature[abs(fload1[, 3])>0.1] #important variables in the third factor
temp=which(abs(fload1[, 3])>0.1)
sum(temp%in%which(pact4to6<1e-50))/length(temp) #significant static variables in the third factor
clear
clear()
train=read.table('./Train/X_train.txt', colClasses='numeric')
subj=as.integer(readLines('Train/subject_id_train.txt'))
trainy=as.integer(readLines('Train/y_train.txt'))
test=read.table('Test/X_test.txt', colClasses='numeric')
testy=as.integer(readLines('Test/y_test.txt'))
feature=as.character(unlist(read.table('features.txt')))
#select the six activities
train=train[trainy%in%1:6, ]
subj=subj[trainy%in%1:6]
trainy=trainy[trainy%in%1:6]
test=test[testy%in%1:6, ]
testy=testy[testy%in%1:6]
table(trainy) #how many obs for each activity
table(subj, trainy) #how many obs for each subject and each activity
table(testy)
View(train)
write.csv(train,'healthstudy2.csv')
write.csv(trainy,'HAPT_Y.csv')
